/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./public/sw.js ***!
  \**********************/
eval("\nself.addEventListener('install', (e) => {\n  console.log('[Service Worker] Installation');\n});\n\nvar cacheName = 'js13kPWA-v1';\nvar appShellFiles = [\n  '/build/css/app.css',\n  '/build/js/script.js',\n  '/build/js/app.js',\n  '/build/js/dates.js',\n  '/build/js/optional.js',\n  '/build/css/app.js',\n  '/img/clock.png'\n];\n\nself.addEventListener('install', (e) => {\n  console.log('[Service Worker] Installation');\n  e.waitUntil(\n    caches.open(cacheName).then((cache) => {\n          console.log('[Service Worker] Mise en cache globale: app shell et contenu');\n      return cache.addAll(appShellFiles);\n    })\n  );\n});\n\nself.addEventListener('fetch', (e) => {\n  console.log('[Service Worker] Ressource récupérée '+e.request.url);\n});\n\nself.addEventListener('fetch', (e) => {\n  e.respondWith(\n    caches.match(e.request).then((r) => {\n          console.log('[Service Worker] Récupération de la ressource: '+e.request.url);\n      return r || fetch(e.request).then((response) => {\n                return caches.open(cacheName).then((cache) => {\n          console.log('[Service Worker] Mise en cache de la nouvelle ressource: '+e.request.url);\n          cache.put(e.request, response.clone());\n          return response;\n        });\n      });\n    })\n  );\n});\n\nself.addEventListener('activate', (e) => {\n  e.waitUntil(\n    caches.keys().then((keyList) => {\n          return Promise.all(keyList.map((key) => {\n        if(cacheName.indexOf(key) === -1) {\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n});\n\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        if (response) {\n          return response;\n        } else {\n          return fetch(event.request)\n            .then(function(res) {\n              return caches.open(cacheName)\n                .then(function(cache) {\n                  cache.put(event.request.url, res.clone());\n                  return res;\n                })\n            })\n            .catch(function(err) {\n                // fallback mechanism\n                // return caches.open(CACHE_CONTAINING_ERROR_MESSAGES)\n                // .then(function(cache) {\n                console.log(\"echec\");\n                return cache.match('/');\n                // });\n            });\n        }\n      })\n  );\n});\n\n\n\n//# sourceURL=webpack:///./public/sw.js?");
/******/ })()
;